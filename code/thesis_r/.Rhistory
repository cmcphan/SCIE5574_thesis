transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
break
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
break
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
break
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
break
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
# Unabbreviated species names with ensembl database names and gene symbol filter names
species_info = hash('hum'=c('human', 'hsapiens_gene_ensembl', 'hgnc_symbol'),
'mou'=c('mouse', 'mmusculus_gene_ensembl', 'mgi_symbol'),
'opo'=c('opossum', 'mdomestica_gene_ensembl', 'hgnc_symbol'))
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl)
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$species_info[[species]][3]
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
break
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
break
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
break
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
break
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
warnings()
row$species_info[[species]][3]
# Unabbreviated species names with ensembl database names and gene symbol filter names
species_info = hash('hum'=c('human', 'hsapiens_gene_ensembl', 'hgnc_symbol'),
'mou'=c('mouse', 'mmusculus_gene_ensembl', 'mgi_symbol'),
'opo'=c('opossum', 'mdomestica_gene_ensembl', 'hgnc_symbol'))
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl)
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$species_info[[species]][3]
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
rows
head(rows)
View(gene_names_dict)
gene_names_dict
row$hgnc_symbol
rownames(rowData(data))
length(rownames(rowData(data)))
?biomaRt::getBM()
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$species_info[[species]][3]
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
View(gene_names_dict)
gene_names_dict[['ENSG00000237094']]
gene_names_dict[['test']] = 'test'
View(gene_names_dict)
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$species_info[[species]][3]
if(!(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
gene_names_dict[['test']]
gene_names_dict[['foo']]
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$species_info[[species]][3]
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
warnings()
View(gene_names_dict)
gene_names$ensembl_gene_id
length(gene_names$ensembl_gene_id)
gene_names[2]
gene_names[2,]
gene_names[2,]$ensembl_gene_id
gene_names[2,]$species_info[[species]][3]
names(gene_names)
names(gene_names) = c('ensembl_gene_id', 'gene_symbol')
head(gene_names)
gene_names[1,]
gene_names[1,]$gene_symbol
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
names(gene_names) = c('ensembl_gene_id', 'gene_symbol') # Make naming consistent across species
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$gene_symbol
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
library(reticulate)
use_condaenv('r-reticulate') # Default environment created through conda_create()
library(anndata)
library(SingleCellExperiment)
library(biomaRt)
library(hash)
# Unabbreviated species names with ensembl database names and gene symbol filter names
species_info = hash('hum'=c('human', 'hsapiens_gene_ensembl', 'hgnc_symbol'),
'mou'=c('mouse', 'mmusculus_gene_ensembl', 'mgi_symbol'),
'opo'=c('opossum', 'mdomestica_gene_ensembl', 'hgnc_symbol'))
data = readRDS('sepp_data/original_data/hum_sce_final.rds')
ensembl = useEnsembl(biomart='genes', dataset='hsapiens_gene_ensembl')
gene_names = getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol'), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
names(gene_names) = c('ensembl_gene_id', 'gene_symbol')
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$gene_symbol
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
gene_names
gene_names$gene_symbol
typeof(gene_names$gene_symbol)
library(reticulate)
use_condaenv('r-reticulate') # Default environment created through conda_create()
library(anndata)
library(SingleCellExperiment)
library(biomaRt)
library(hash)
######
# Convert to Anndata
# Unabbreviated species names with ensembl database names and gene symbol filter names
species_info = hash('hum'=c('human', 'hsapiens_gene_ensembl', 'hgnc_symbol'),
'mou'=c('mouse', 'mmusculus_gene_ensembl', 'mgi_symbol'),
'opo'=c('opossum', 'mdomestica_gene_ensembl', 'hgnc_symbol'))
# Mouse gene symbols from the Mouse Genome Informatics (MGI database)
# Opossum gene symbols are *projected* HGNC symbols
for(dataset in list.files(path='sepp_data/original_data/')){
data = readRDS(paste("sepp_data/original_data/",dataset, sep=''))
species = strsplit(dataset, '_')[[1]][1]
# Get gene names from ensembl
ensembl = useEnsembl(biomart='genes', dataset=species_info[[species]][2])
gene_names = getBM(attributes=c('ensembl_gene_id', species_info[[species]][3]), filters='ensembl_gene_id',
values=rownames(rowData(data)), mart=ensembl, useCache=FALSE)
names(gene_names) = c('ensembl_gene_id', 'gene_symbol') # Make naming consistent across species
# Convert to dictionary
gene_names_dict = hash()
for(i in 1:length(gene_names$ensembl_gene_id)){ # Build dictionary of gene names
row = gene_names[i,]
id = row$ensembl_gene_id
name = row$gene_symbol
if(is.null(gene_names_dict[[id]])){ # If there's already an entry for this ID, skip it
gene_names_dict[[id]] = name
}
}
# Build anndata object
transposed_matrix = t(assay(data))
cols = data.frame(colData(data))
rows = data.frame(row.names='ensembl_gene_id')
for(gene in rownames(rowData(data))){
rows = rbind(rows, c(gene, gene_names_dict[[gene]]))
}
colnames(rows) = c('ensembl_gene_id', 'gene_symbol')
row.names(rows) = rows$ensembl_gene_id
ad = AnnData(
X = transposed_matrix,
obs = cols,
var = rows,
)
# Verify conversion worked
if(!unique(ad$var_names == rownames(rowData(data)))){
print(paste('var_names do not match for',species_info[[species]][1]))
return(1)
}
if(!unique(ad$obs_names == rownames(colData(data)))){
print(paste('obs_names do not match for',species_info[[species]][1]))
return(1)
}
# Choose 10 random indices from anywhere in the dataset and check the counts match between the
# new anndata object and the original dataset in both directions
for(i in sample(1:length(rownames(colData(data))), 10)){
if(!unique(data.frame(ad$X[i,]) == data.frame(assay(data)[,i]))){
print(paste('Matrices do not match at ad row index',i,'for',species_info[[species]][1]))
return(1)
}
}
for(i in sample(1:length(rownames(rowData(data))), 10)){
if(!unique(data.frame(ad$X[,i]) == data.frame(assay(data)[i,]))){
print(paste('Matrices do not match at ad column index',i,'for',species_info[[species]][1]))
return(1)
}
}
write_h5ad(ad, paste('sepp_data/sepp_', species_info[[species]][1], '.h5ad', sep=''))
}
